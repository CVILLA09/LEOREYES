{"version":3,"file":"music-D7_G78r_.js","sources":["../../src/js/scroll-animations.js","../../src/js/music.js"],"sourcesContent":["/**\n * Scroll animations for the music page\n * Uses Intersection Observer API to detect when elements enter/exit the viewport\n */\n\nclass ScrollAnimations {\n    constructor() {\n        // Elements to animate\n        this.fadeElements = [];\n        \n        // Initialize\n        this.init();\n    }\n    \n    init() {\n        // Find all elements to animate\n        this.fadeElements = document.querySelectorAll('.fade-element');\n        \n        // Set up the intersection observer\n        const options = {\n            root: null, // Use the viewport\n            rootMargin: '0px',\n            threshold: 0.15 // Trigger when 15% of the element is visible\n        };\n        \n        // Create an observer\n        this.observer = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                // Add or remove the 'visible' class based on intersection\n                if (entry.isIntersecting) {\n                    entry.target.classList.add('visible');\n                } else {\n                    // Only remove the class if the element is above the viewport (scrolled past)\n                    if (entry.boundingClientRect.y < 0) {\n                        entry.target.classList.remove('visible');\n                    }\n                }\n            });\n        }, options);\n        \n        // Observe all fade elements\n        this.fadeElements.forEach(element => {\n            this.observer.observe(element);\n        });\n    }\n}\n\n// Export the class\nexport { ScrollAnimations }; ","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { SceneManager } from './SceneManager.js';\nimport { BackgroundManager } from './BackgroundManager.js';\nimport { ScrollAnimations } from './scroll-animations.js';\n\n// Music page application class\nexport class MusicApp {\n    constructor() {\n        // Set up the container\n        this.container = document.getElementById('canvas-container');\n        \n        // Initialize scene manager\n        this.sceneManager = new SceneManager(this.container);\n        \n        // Initialize background with stars\n        this.backgroundManager = new BackgroundManager(this.sceneManager.scene);\n        \n        // Ensure the canvas spans full page even when scrolling\n        this.container.style.position = 'fixed';\n        this.container.style.top = '0';\n        this.container.style.left = '0';\n        this.container.style.width = '100%';\n        this.container.style.height = '100%';\n        this.container.style.zIndex = '1';\n        \n        // Start animation loop\n        this.animate();\n        \n        // Handle window resize\n        window.addEventListener('resize', this.onWindowResize.bind(this));\n        \n        // Initialize music page interactions\n        this.initMusicInteractions();\n        \n        // Initialize scroll animations\n        this.scrollAnimations = new ScrollAnimations();\n    }\n    \n    animate() {\n        requestAnimationFrame(this.animate.bind(this));\n        \n        // Update components\n        this.backgroundManager.update();\n        \n        // Render scene\n        this.sceneManager.render();\n    }\n    \n    onWindowResize() {\n        this.sceneManager.onWindowResize();\n    }\n    \n    initMusicInteractions() {\n        // Smooth scroll for music button\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n            anchor.addEventListener('click', function(e) {\n                e.preventDefault();\n                const targetId = this.getAttribute('href');\n                const targetElement = document.querySelector(targetId);\n                \n                if (targetElement) {\n                    targetElement.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n        \n        // Additional music page interactions could be added here\n        // For example, handling audio playback, visualizations, etc.\n    }\n}\n\n// Initialize the app when the window loads\nwindow.addEventListener('load', () => {\n    new MusicApp();\n}); "],"names":["ScrollAnimations","options","entries","observer","entry","element","MusicApp","SceneManager","BackgroundManager","anchor","e","targetId","targetElement"],"mappings":"2DAKA,MAAMA,CAAiB,CACnB,aAAc,CAEV,KAAK,aAAe,CAAE,EAGtB,KAAK,KAAM,CACnB,CAEI,MAAO,CAEH,KAAK,aAAe,SAAS,iBAAiB,eAAe,EAG7D,MAAMC,EAAU,CACZ,KAAM,KACN,WAAY,MACZ,UAAW,GACd,EAGD,KAAK,SAAW,IAAI,qBAAqB,CAACC,EAASC,IAAa,CAC5DD,EAAQ,QAAQE,GAAS,CAEjBA,EAAM,eACNA,EAAM,OAAO,UAAU,IAAI,SAAS,EAGhCA,EAAM,mBAAmB,EAAI,GAC7BA,EAAM,OAAO,UAAU,OAAO,SAAS,CAG/D,CAAa,CACJ,EAAEH,CAAO,EAGV,KAAK,aAAa,QAAQI,GAAW,CACjC,KAAK,SAAS,QAAQA,CAAO,CACzC,CAAS,CACT,CACA,CCrCO,MAAMC,CAAS,CAClB,aAAc,CAEV,KAAK,UAAY,SAAS,eAAe,kBAAkB,EAG3D,KAAK,aAAe,IAAIC,EAAa,KAAK,SAAS,EAGnD,KAAK,kBAAoB,IAAIC,EAAkB,KAAK,aAAa,KAAK,EAGtE,KAAK,UAAU,MAAM,SAAW,QAChC,KAAK,UAAU,MAAM,IAAM,IAC3B,KAAK,UAAU,MAAM,KAAO,IAC5B,KAAK,UAAU,MAAM,MAAQ,OAC7B,KAAK,UAAU,MAAM,OAAS,OAC9B,KAAK,UAAU,MAAM,OAAS,IAG9B,KAAK,QAAS,EAGd,OAAO,iBAAiB,SAAU,KAAK,eAAe,KAAK,IAAI,CAAC,EAGhE,KAAK,sBAAuB,EAG5B,KAAK,iBAAmB,IAAIR,CACpC,CAEI,SAAU,CACN,sBAAsB,KAAK,QAAQ,KAAK,IAAI,CAAC,EAG7C,KAAK,kBAAkB,OAAQ,EAG/B,KAAK,aAAa,OAAQ,CAClC,CAEI,gBAAiB,CACb,KAAK,aAAa,eAAgB,CAC1C,CAEI,uBAAwB,CAEpB,SAAS,iBAAiB,cAAc,EAAE,QAAQS,GAAU,CACxDA,EAAO,iBAAiB,QAAS,SAASC,EAAG,CACzCA,EAAE,eAAgB,EAClB,MAAMC,EAAW,KAAK,aAAa,MAAM,EACnCC,EAAgB,SAAS,cAAcD,CAAQ,EAEjDC,GACAA,EAAc,eAAe,CACzB,SAAU,SACV,MAAO,OAC/B,CAAqB,CAErB,CAAa,CACb,CAAS,CAIT,CACA,CAGA,OAAO,iBAAiB,OAAQ,IAAM,CAClC,IAAIN,CACR,CAAC"}